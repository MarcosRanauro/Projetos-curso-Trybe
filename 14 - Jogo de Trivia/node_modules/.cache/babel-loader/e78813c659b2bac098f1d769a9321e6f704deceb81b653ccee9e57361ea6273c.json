{"ast":null,"code":"var _jsxFileName = \"/home/marcos-ranauro/Trybe/Projetos/sd-027-b-project-trivia-react-redux/src/components/QuestionsGame.jsx\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport shuffle from './Shuffle';\nimport { actionScore, actionAssertions } from '../redux/actions';\nimport Timer from './Timer';\nimport '../App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass QuestionsGame extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      correct: '',\n      incorrect: [],\n      shuffleAnswers: [],\n      count: 0,\n      resultApi: [],\n      seconds: 30,\n      disabled: false,\n      correctClass: 'correct-answer',\n      wrongClass: 'wrong-answer',\n      level: '',\n      nextBtn: true\n    };\n    this.fetchQuestionsAnswer = async () => {\n      const {\n        history\n      } = this.props;\n      const getToken = localStorage.getItem('token');\n      const fechApi = await fetch(`https://opentdb.com/api.php?amount=5&token=${getToken}`);\n      const json = await fechApi.json();\n      const result = json.results;\n      const three = 3;\n      if (json.response_code === three) {\n        localStorage.removeItem('token');\n        history.push('/');\n      } else {\n        return this.setState({\n          resultApi: result\n        }, () => this.responseApi());\n      }\n    };\n    this.responseApi = () => {\n      const {\n        count,\n        resultApi\n      } = this.state;\n      const correct = resultApi[count].correct_answer;\n      const incorrect = resultApi[count].incorrect_answers;\n      const all = [...incorrect, correct];\n      const shuffleAnswers = shuffle(all);\n      if (!correct) {\n        return;\n      }\n      this.setState({\n        correct,\n        incorrect,\n        shuffleAnswers,\n        category: resultApi[count].category,\n        question: resultApi[count].question,\n        level: resultApi[count].level\n      });\n    };\n    this.handleTimer = seconds => {\n      this.setState({\n        seconds\n      });\n    };\n    this.onClick = target => {\n      const {\n        count,\n        level,\n        seconds\n      } = this.state;\n      const correctAnswer = document.querySelector('.correct-answer');\n      const wrongAnswer = document.querySelectorAll('.wrong-answer');\n      wrongAnswer.forEach(data => data.classList.add('wrongAnswer'));\n      correctAnswer.classList.add('correctAnswer');\n      this.setState(prevState => ({\n        count: count + 1,\n        seconds: prevState.seconds,\n        disabled: true,\n        nextBtn: false\n      }), () => {\n        clearInterval(this.intervalID);\n      });\n      const {\n        dispatch,\n        score,\n        assertions\n      } = this.props;\n      let difficultyValue = 0;\n      const three = 3;\n      const two = 2;\n      const one = 1;\n      const ten = 10;\n      if (target.className === 'correct-answer correctAnswer') {\n        if (level === 'hard') {\n          difficultyValue = three;\n        } else if (level === 'medium') {\n          difficultyValue = two;\n        } else {\n          difficultyValue = one;\n        }\n        const totalScore = score + (ten + seconds * difficultyValue);\n        const assertion = assertions + 1;\n        dispatch(actionScore(totalScore));\n        dispatch(actionAssertions(assertion));\n      } else {\n        dispatch(actionScore(score));\n        dispatch(actionAssertions(assertions));\n      }\n    };\n    this.nextQuestion = () => {\n      const correctAnswer = document.querySelector('.correct-answer');\n      const wrongAnswer = document.querySelectorAll('.wrong-answer');\n      wrongAnswer.forEach(data => data.classList.remove('wrongAnswer'));\n      correctAnswer.classList.remove('correctAnswer');\n      const max = 5;\n      const {\n        count,\n        seconds\n      } = this.state;\n      if (count === max && seconds === 0) {\n        const {\n          history\n        } = this.props;\n        history.push('/feedback');\n      } else {\n        this.fetchQuestionsAnswer();\n        this.setState({\n          disabled: false,\n          nextBtn: true\n        });\n      }\n    };\n  }\n  componentDidMount() {\n    this.fetchQuestionsAnswer();\n    const SECONDS = 1000;\n    this.intervalID = setInterval(() => {\n      this.setState(prevState => ({\n        seconds: prevState.seconds - 1\n      }));\n    }, SECONDS);\n  }\n  componentDidUpdate(_prevProps, prevState) {\n    const LIMIT_SECONDS = 1;\n    if (prevState.seconds === LIMIT_SECONDS) {\n      this.setState({\n        disabled: true\n      }, () => {\n        clearInterval(this.intervalID);\n      });\n    }\n  }\n  render() {\n    const {\n      correct,\n      incorrect,\n      shuffleAnswers,\n      question,\n      category,\n      disabled,\n      correctClass,\n      wrongClass,\n      nextBtn\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        \"data-testid\": \"question-category\",\n        children: category\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        \"data-testid\": \"question-text\",\n        children: question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Timer, {\n        handleTimer: this.handleTimer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        \"data-testid\": \"answer-options\",\n        children: shuffleAnswers.map((answer, i) => {\n          if (answer === correct) {\n            return /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: correctClass,\n              disabled: disabled,\n              name: \"correct-answer\",\n              \"data-testid\": \"correct-answer\",\n              onClick: _ref => {\n                let {\n                  target\n                } = _ref;\n                return this.onClick(target);\n              },\n              children: answer\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 19\n            }, this);\n          }\n          const index = incorrect.indexOf(answer);\n          return /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: wrongClass,\n            disabled: disabled,\n            name: `wrong-answer-${index}`,\n            \"data-testid\": `wrong-answer-${index}`,\n            onClick: _ref2 => {\n              let {\n                target\n              } = _ref2;\n              return this.onClick(target);\n            },\n            children: answer\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this), nextBtn ? null : /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        \"data-testid\": \"btn-next\",\n        name: \"nextBtn\",\n        onClick: () => this.nextQuestion(),\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this);\n  }\n}\nQuestionsGame.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func\n  }),\n  question: PropTypes.shape({\n    question: PropTypes.string,\n    correct_answer: PropTypes.string,\n    category: PropTypes.string\n  })\n}.isRequired;\nconst mapStateToProps = state => ({\n  score: state.player.score,\n  assertions: state.player.assertions\n});\nexport default connect(mapStateToProps)(QuestionsGame);","map":{"version":3,"names":["React","Component","PropTypes","connect","shuffle","actionScore","actionAssertions","Timer","QuestionsGame","state","correct","incorrect","shuffleAnswers","count","resultApi","seconds","disabled","correctClass","wrongClass","level","nextBtn","fetchQuestionsAnswer","history","props","getToken","localStorage","getItem","fechApi","fetch","json","result","results","three","response_code","removeItem","push","setState","responseApi","correct_answer","incorrect_answers","all","category","question","handleTimer","onClick","target","correctAnswer","document","querySelector","wrongAnswer","querySelectorAll","forEach","data","classList","add","prevState","clearInterval","intervalID","dispatch","score","assertions","difficultyValue","two","one","ten","className","totalScore","assertion","nextQuestion","remove","max","componentDidMount","SECONDS","setInterval","componentDidUpdate","_prevProps","LIMIT_SECONDS","render","map","answer","i","index","indexOf","propTypes","shape","func","string","isRequired","mapStateToProps","player"],"sources":["/home/marcos-ranauro/Trybe/Projetos/sd-027-b-project-trivia-react-redux/src/components/QuestionsGame.jsx"],"sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport shuffle from './Shuffle';\nimport { actionScore, actionAssertions } from '../redux/actions';\nimport Timer from './Timer';\nimport '../App.css';\n\nclass QuestionsGame extends Component {\n  state = {\n    correct: '',\n    incorrect: [],\n    shuffleAnswers: [],\n    count: 0,\n    resultApi: [],\n    seconds: 30,\n    disabled: false,\n    correctClass: 'correct-answer',\n    wrongClass: 'wrong-answer',\n    level: '',\n    nextBtn: true,\n  };\n\n  componentDidMount() {\n    this.fetchQuestionsAnswer();\n    const SECONDS = 1000;\n    this.intervalID = setInterval(() => {\n      this.setState((prevState) => ({\n        seconds: prevState.seconds - 1,\n      }));\n    }, SECONDS);\n  }\n\n  componentDidUpdate(_prevProps, prevState) {\n    const LIMIT_SECONDS = 1;\n\n    if (prevState.seconds === LIMIT_SECONDS) {\n      this.setState({\n        disabled: true,\n      }, () => {\n        clearInterval(this.intervalID);\n      });\n    }\n  }\n\n  fetchQuestionsAnswer = async () => {\n    const { history } = this.props;\n    const getToken = localStorage.getItem('token');\n    const fechApi = await fetch(`https://opentdb.com/api.php?amount=5&token=${getToken}`);\n    const json = await fechApi.json();\n    const result = json.results;\n    const three = 3;\n    if (json.response_code === three) {\n      localStorage.removeItem('token');\n      history.push('/');\n    } else {\n      return this.setState({ resultApi: result }, () => this.responseApi());\n    }\n  };\n\n  responseApi = () => {\n    const { count, resultApi } = this.state;\n\n    const correct = resultApi[count].correct_answer;\n    const incorrect = resultApi[count].incorrect_answers;\n    const all = [...incorrect, correct];\n    const shuffleAnswers = shuffle(all);\n    if (!correct) {\n      return;\n    }\n    this.setState({\n      correct,\n      incorrect,\n      shuffleAnswers,\n      category: resultApi[count].category,\n      question: resultApi[count].question,\n      level: resultApi[count].level,\n    });\n  };\n\n  handleTimer = (seconds) => {\n    this.setState({ seconds });\n  };\n\n  onClick = (target) => {\n    const { count, level, seconds } = this.state;\n    const correctAnswer = document.querySelector('.correct-answer');\n    const wrongAnswer = document.querySelectorAll('.wrong-answer');\n    wrongAnswer.forEach((data) => data.classList.add('wrongAnswer'));\n    correctAnswer.classList.add('correctAnswer');\n    this.setState((prevState) => ({\n      count: count + 1,\n      seconds: prevState.seconds,\n      disabled: true,\n      nextBtn: false,\n    }), () => {\n      clearInterval(this.intervalID);\n    });\n    const { dispatch, score, assertions } = this.props;\n    let difficultyValue = 0;\n    const three = 3;\n    const two = 2;\n    const one = 1;\n    const ten = 10;\n    if (target.className === 'correct-answer correctAnswer') {\n      if (level === 'hard') {\n        difficultyValue = three;\n      } else if (level === 'medium') {\n        difficultyValue = two;\n      } else {\n        difficultyValue = one;\n      }\n      const totalScore = score + (ten + (seconds * difficultyValue));\n      const assertion = assertions + 1;\n      dispatch(actionScore(totalScore));\n      dispatch(actionAssertions(assertion));\n    } else {\n      dispatch(actionScore(score));\n      dispatch(actionAssertions(assertions));\n    }\n  };\n\n  nextQuestion = () => {\n    const correctAnswer = document.querySelector('.correct-answer');\n    const wrongAnswer = document.querySelectorAll('.wrong-answer');\n    wrongAnswer.forEach((data) => data.classList.remove('wrongAnswer'));\n    correctAnswer.classList.remove('correctAnswer');\n    const max = 5;\n    const { count, seconds } = this.state;\n    if (count === max && seconds === 0) {\n      const { history } = this.props;\n      history.push('/feedback');\n    } else {\n      this.fetchQuestionsAnswer();\n      this.setState({\n        disabled: false,\n        nextBtn: true,\n      });\n    }\n  };\n\n  render() {\n    const {\n      correct,\n      incorrect,\n      shuffleAnswers,\n      question,\n      category,\n      disabled,\n      correctClass,\n      wrongClass,\n      nextBtn,\n    } = this.state;\n    return (\n      <div>\n        <h1 data-testid=\"question-category\">{category}</h1>\n        <h2 data-testid=\"question-text\">{question}</h2>\n        <Timer handleTimer={ this.handleTimer } />\n        <div data-testid=\"answer-options\">\n          {\n            shuffleAnswers.map((answer, i) => {\n              if (answer === correct) {\n                return (\n                  <button\n                    type=\"button\"\n                    className={ correctClass }\n                    disabled={ disabled }\n                    name=\"correct-answer\"\n                    data-testid=\"correct-answer\"\n                    key={ i }\n                    onClick={ ({ target }) => this.onClick(target) }\n                  >\n                    {answer}\n                  </button>\n                );\n              }\n              const index = incorrect.indexOf(answer);\n              return (\n                <button\n                  type=\"button\"\n                  className={ wrongClass }\n                  disabled={ disabled }\n                  name={ `wrong-answer-${index}` }\n                  data-testid={ `wrong-answer-${index}` }\n                  key={ i }\n                  onClick={ ({ target }) => this.onClick(target) }\n                >\n                  {answer}\n                </button>\n              );\n            })\n          }\n        </div>\n        { nextBtn ? null : (\n          <button\n            type=\"button\"\n            data-testid=\"btn-next\"\n            name=\"nextBtn\"\n            onClick={ () => this.nextQuestion() }\n          >\n            Next\n          </button>\n        )}\n      </div>\n    );\n  }\n}\n\nQuestionsGame.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }),\n  question: PropTypes.shape({\n    question: PropTypes.string,\n    correct_answer: PropTypes.string,\n    category: PropTypes.string,\n  }),\n}.isRequired;\n\nconst mapStateToProps = (state) => ({\n  score: state.player.score,\n  assertions: state.player.assertions,\n});\n\nexport default connect(mapStateToProps)(QuestionsGame);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}