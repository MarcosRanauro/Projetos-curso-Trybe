{"ast":null,"code":"var _jsxFileName = \"/home/marcos-ranauro/Trybe/Projetos/sd-027-b-project-starwars-planets-search/src/context/ApiProvider.jsx\",\n  _s = $RefreshSig$();\nimport PropTypes from 'prop-types';\nimport React, { useEffect, useState } from 'react';\nimport ApiContext from './ApiContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ApiProvider(_ref) {\n  _s();\n  let {\n    children\n  } = _ref;\n  const {\n    planets,\n    setPlanets\n  } = useState([]);\n  useEffect(() => {\n    async function fetchData() {\n      const response = await fetch('https://swapi.dev/api/planets');\n      const data = await response.json();\n      const planetsData = data.results.map(planet => {\n        delete planet.residents;\n        return planet;\n      });\n      setPlanets(planetsData);\n    }\n    fetchData();\n  });\n  return /*#__PURE__*/_jsxDEV(ApiContext.Provider, {\n    value: planets,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n}\n_s(ApiProvider, \"PjVx07RRFoU26sTFhcTpbjdM+vE=\");\n_c = ApiProvider;\nApiProvider.propTypes = {\n  children: PropTypes.node\n}.isRequired;\nexport default ApiProvider;\nvar _c;\n$RefreshReg$(_c, \"ApiProvider\");","map":{"version":3,"names":["PropTypes","React","useEffect","useState","ApiContext","ApiProvider","children","planets","setPlanets","fetchData","response","fetch","data","json","planetsData","results","map","planet","residents","propTypes","node","isRequired"],"sources":["/home/marcos-ranauro/Trybe/Projetos/sd-027-b-project-starwars-planets-search/src/context/ApiProvider.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\nimport React, { useEffect, useState } from 'react';\nimport ApiContext from './ApiContext';\n\nfunction ApiProvider({ children }) {\n  const { planets, setPlanets } = useState([]);\n\n  useEffect(() => {\n    async function fetchData() {\n      const response = await fetch('https://swapi.dev/api/planets');\n      const data = await response.json();\n      const planetsData = data.results.map((planet) => {\n        delete planet.residents;\n        return planet;\n      });\n      setPlanets(planetsData);\n    }\n    fetchData();\n  });\n\n  return (\n    <ApiContext.Provider value={ planets }>\n      { children }\n    </ApiContext.Provider>\n  );\n}\n\nApiProvider.propTypes = {\n  children: PropTypes.node,\n}.isRequired;\n\nexport default ApiProvider;\n"],"mappings":";;AAAA,OAAOA,SAAS,MAAM,YAAY;AAClC,OAAOC,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,UAAU,MAAM,cAAc;AAAC;AAEtC,SAASC,WAAW,OAAe;EAAA;EAAA,IAAd;IAAEC;EAAS,CAAC;EAC/B,MAAM;IAAEC,OAAO;IAAEC;EAAW,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EAE5CD,SAAS,CAAC,MAAM;IACd,eAAeO,SAAS,GAAG;MACzB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+B,CAAC;MAC7D,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE;MAClC,MAAMC,WAAW,GAAGF,IAAI,CAACG,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;QAC/C,OAAOA,MAAM,CAACC,SAAS;QACvB,OAAOD,MAAM;MACf,CAAC,CAAC;MACFT,UAAU,CAACM,WAAW,CAAC;IACzB;IACAL,SAAS,EAAE;EACb,CAAC,CAAC;EAEF,oBACE,QAAC,UAAU,CAAC,QAAQ;IAAC,KAAK,EAAGF,OAAS;IAAA,UAClCD;EAAQ;IAAA;IAAA;IAAA;EAAA,QACU;AAE1B;AAAC,GArBQD,WAAW;AAAA,KAAXA,WAAW;AAuBpBA,WAAW,CAACc,SAAS,GAAG;EACtBb,QAAQ,EAAEN,SAAS,CAACoB;AACtB,CAAC,CAACC,UAAU;AAEZ,eAAehB,WAAW;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}