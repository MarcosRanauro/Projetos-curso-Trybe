{"ast":null,"code":"var _jsxFileName = \"/home/marcos-ranauro/Trybe/Projetos/sd-027-b-project-starwars-planets-search/src/context/ApiProvider.jsx\",\n  _s = $RefreshSig$();\nimport PropTypes from 'prop-types';\nimport { useEffect, useState } from 'react';\nimport ApiContext from './ApiContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ApiProvider(_ref) {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [planets, setPlanets] = useState([]);\n  const [filteredPlanets, setFilteredPlanets] = useState([]);\n  const [numericFilters, setNumericFilters] = useState([]);\n  useEffect(() => {\n    async function fetchData() {\n      const response = await fetch('https://swapi.dev/api/planets');\n      const data = await response.json();\n      const planetsData = data.results.map(planet => {\n        delete planet.residents;\n        return planet;\n      });\n      setPlanets(planetsData);\n      setFilteredPlanets(planetsData);\n    }\n    fetchData();\n  }, []);\n  function nameFilter(text) {\n    const regex = new RegExp(`${text}`, 'i');\n    setFilteredPlanets(planets.filter(item => item.name.match(regex)));\n  }\n  useEffect(() => {\n    let newPlanets = planets;\n    numericFilters.forEach(element => {\n      if (element.type === 'maior que') {\n        newPlanets = newPlanets.filter(item => Number(element.number) < Number(item[element.column]));\n      } else if (element.type === 'menor que') {\n        newPlanets = newPlanets.filter(item => Number(element.number) > Number(item[element.column]));\n      } else if (element.type === 'igual a') {\n        newPlanets = newPlanets.filter(item => Number(element.number) === Number(item[element.column]));\n      }\n    });\n    setFilteredPlanets(newPlanets);\n  }, [numericFilters, planets]);\n  function numericFilter(column, type, number) {\n    setNumericFilters([...numericFilters, {\n      column,\n      type,\n      number\n    }]);\n  }\n  function deleteNumericFilter(column) {\n    setNumericFilters(numericFilters.filter(item => item.column !== column));\n  }\n  return /*#__PURE__*/_jsxDEV(ApiContext.Provider, {\n    value: {\n      filteredPlanets,\n      nameFilter,\n      numericFilter,\n      numericFilters,\n      deleteNumericFilter\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n_s(ApiProvider, \"pNil52GrTOaB6X1MfOZOWleOg0o=\");\n_c = ApiProvider;\nApiProvider.propTypes = {\n  children: PropTypes.node.isRequired\n};\nexport default ApiProvider;\nvar _c;\n$RefreshReg$(_c, \"ApiProvider\");","map":{"version":3,"names":["PropTypes","useEffect","useState","ApiContext","ApiProvider","children","planets","setPlanets","filteredPlanets","setFilteredPlanets","numericFilters","setNumericFilters","fetchData","response","fetch","data","json","planetsData","results","map","planet","residents","nameFilter","text","regex","RegExp","filter","item","name","match","newPlanets","forEach","element","type","Number","number","column","numericFilter","deleteNumericFilter","propTypes","node","isRequired"],"sources":["/home/marcos-ranauro/Trybe/Projetos/sd-027-b-project-starwars-planets-search/src/context/ApiProvider.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { useEffect, useState } from 'react';\nimport ApiContext from './ApiContext';\n\nfunction ApiProvider({ children }) {\n  const [planets, setPlanets] = useState([]);\n  const [filteredPlanets, setFilteredPlanets] = useState([]);\n  const [numericFilters, setNumericFilters] = useState([]);\n\n  useEffect(() => {\n    async function fetchData() {\n      const response = await fetch('https://swapi.dev/api/planets');\n      const data = await response.json();\n      const planetsData = data.results.map((planet) => {\n        delete planet.residents;\n        return planet;\n      });\n      setPlanets(planetsData);\n      setFilteredPlanets(planetsData);\n    }\n    fetchData();\n  }, []);\n\n  function nameFilter(text) {\n    const regex = new RegExp(`${text}`, 'i');\n    setFilteredPlanets(planets.filter((item) => item.name.match(regex)));\n  }\n\n  useEffect(() => {\n    let newPlanets = planets;\n    numericFilters.forEach((element) => {\n      if (element.type === 'maior que') {\n        newPlanets = newPlanets\n          .filter((item) => Number(element.number) < Number(item[element.column]));\n      } else if (element.type === 'menor que') {\n        newPlanets = newPlanets\n          .filter((item) => Number(element.number) > Number(item[element.column]));\n      } else if (element.type === 'igual a') {\n        newPlanets = newPlanets\n          .filter((item) => Number(element.number) === Number(item[element.column]));\n      }\n    });\n    setFilteredPlanets(newPlanets);\n  }, [numericFilters, planets]);\n\n  function numericFilter(column, type, number) {\n    setNumericFilters([...numericFilters, { column, type, number }]);\n  }\n\n  function deleteNumericFilter(column) {\n    setNumericFilters(numericFilters.filter((item) => item.column !== column));\n  }\n\n  return (\n    <ApiContext.Provider\n      value={\n        {\n          filteredPlanets,\n          nameFilter,\n          numericFilter,\n          numericFilters,\n          deleteNumericFilter }\n      }\n    >\n      {children}\n    </ApiContext.Provider>\n  );\n}\nApiProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default ApiProvider;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}