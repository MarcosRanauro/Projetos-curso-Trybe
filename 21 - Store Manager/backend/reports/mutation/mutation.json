{"files":{"src/services/sale.service.js":{"language":"javascript","mutants":[{"id":"101","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":25},"start":{"column":19,"line":23}}},{"id":"102","mutatorName":"BooleanLiteral","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":29,"line":24},"start":{"column":25,"line":24}}},{"id":"106","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":38},"start":{"column":14,"line":36}}},{"id":"111","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":44},"start":{"column":24,"line":42}}},{"id":"79","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":47,"line":7},"start":{"column":10,"line":7}}},{"id":"80","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":32,"line":7},"start":{"column":20,"line":7}}},{"id":"89","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":72,"line":12},"start":{"column":12,"line":12}}},{"id":"90","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":33,"line":12},"start":{"column":22,"line":12}}},{"id":"91","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":70,"line":12},"start":{"column":41,"line":12}}},{"id":"92","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":68,"line":12},"start":{"column":52,"line":12}}},{"id":"93","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":46,"line":14},"start":{"column":10,"line":14}}},{"id":"94","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":32,"line":14},"start":{"column":20,"line":14}}},{"id":"107","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":81,"line":37},"start":{"column":12,"line":37}}},{"id":"108","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":79,"line":37},"start":{"column":53,"line":37}}},{"id":"112","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":75,"line":43},"start":{"column":12,"line":43}}},{"id":"113","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":33,"line":43},"start":{"column":22,"line":43}}},{"id":"114","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":73,"line":43},"start":{"column":41,"line":43}}},{"id":"115","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":71,"line":43},"start":{"column":52,"line":43}}},{"id":"116","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":4,"line":51},"start":{"column":19,"line":48}}},{"id":"117","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":46,"line":52},"start":{"column":10,"line":52}}},{"id":"118","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":29,"line":52},"start":{"column":20,"line":52}}},{"id":"119","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":58},"start":{"column":18,"line":54}}},{"id":"78","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Cannot destructure property 'data' of '(intermediate value)' as it is undefined.","status":"Killed","static":false,"testsCompleted":1,"killedBy":["17"],"coveredBy":["17"],"location":{"end":{"column":2,"line":8},"start":{"column":29,"line":5}}},{"id":"81","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Cannot destructure property 'status' of '(intermediate value)' as it is undefined.","status":"Killed","static":false,"testsCompleted":1,"killedBy":["18"],"coveredBy":["18","19"],"location":{"end":{"column":2,"line":15},"start":{"column":35,"line":9}}},{"id":"82","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'NOT_FOUND' to equal 'SUCCESSFUL'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["18"],"coveredBy":["18","19"],"location":{"end":{"column":33,"line":11},"start":{"column":7,"line":11}}},{"id":"83","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'SUCCESSFUL' to equal 'NOT_FOUND'","status":"Killed","static":false,"testsCompleted":2,"killedBy":["19"],"coveredBy":["18","19"],"location":{"end":{"column":33,"line":11},"start":{"column":7,"line":11}}},{"id":"84","mutatorName":"LogicalOperator","replacement":"sale.length === 0 && !sale","statusReason":"expected 'SUCCESSFUL' to equal 'NOT_FOUND'","status":"Killed","static":false,"testsCompleted":2,"killedBy":["19"],"coveredBy":["18","19"],"location":{"end":{"column":33,"line":11},"start":{"column":7,"line":11}}},{"id":"85","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'SUCCESSFUL' to equal 'NOT_FOUND'","status":"Killed","static":false,"testsCompleted":2,"killedBy":["19"],"coveredBy":["18","19"],"location":{"end":{"column":24,"line":11},"start":{"column":7,"line":11}}},{"id":"86","mutatorName":"EqualityOperator","replacement":"sale.length !== 0","statusReason":"expected 'NOT_FOUND' to equal 'SUCCESSFUL'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["18"],"coveredBy":["18","19"],"location":{"end":{"column":24,"line":11},"start":{"column":7,"line":11}}},{"id":"87","mutatorName":"BooleanLiteral","replacement":"sale","statusReason":"expected 'NOT_FOUND' to equal 'SUCCESSFUL'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["18"],"coveredBy":["18"],"location":{"end":{"column":33,"line":11},"start":{"column":28,"line":11}}},{"id":"88","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 'SUCCESSFUL' to equal 'NOT_FOUND'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["19"],"coveredBy":["19"],"location":{"end":{"column":4,"line":13},"start":{"column":35,"line":11}}},{"id":"95","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["20"],"location":{"end":{"column":2,"line":31},"start":{"column":52,"line":17}}},{"id":"96","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 'NOT_FOUND' to equal 'CREATED'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["20"],"coveredBy":["20"],"location":{"end":{"column":30,"line":18},"start":{"column":25,"line":18}}},{"id":"97","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["20"],"location":{"end":{"column":4,"line":26},"start":{"column":49,"line":20}}},{"id":"98","mutatorName":"BooleanLiteral","replacement":"product","statusReason":"expected 'NOT_FOUND' to equal 'CREATED'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["20"],"coveredBy":["20"],"location":{"end":{"column":17,"line":23},"start":{"column":9,"line":23}}},{"id":"99","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'NOT_FOUND' to equal 'CREATED'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["20"],"coveredBy":["20"],"location":{"end":{"column":17,"line":23},"start":{"column":9,"line":23}}},{"id":"100","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["20"],"location":{"end":{"column":17,"line":23},"start":{"column":9,"line":23}}},{"id":"103","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Cannot destructure property 'status' of '(intermediate value)' as it is undefined.","status":"Killed","static":false,"testsCompleted":1,"killedBy":["20"],"coveredBy":["20"],"location":{"end":{"column":2,"line":53},"start":{"column":36,"line":33}}},{"id":"104","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Cannot read properties of undefined (reading 'type')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["20"],"coveredBy":["20"],"location":{"end":{"column":12,"line":36},"start":{"column":7,"line":36}}},{"id":"105","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["20"],"location":{"end":{"column":12,"line":36},"start":{"column":7,"line":36}}},{"id":"109","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'NOT_FOUND' to equal 'CREATED'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["20"],"coveredBy":["20"],"location":{"end":{"column":22,"line":42},"start":{"column":7,"line":42}}},{"id":"110","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["20"],"location":{"end":{"column":22,"line":42},"start":{"column":7,"line":42}}}],"source":"const { saleModel, productModel } = require('../models');\nconst mapJoiError = require('./validations/mapJoiError');\nconst { validateCreateSaleData } = require('./validations/validateInputValues');\n\nconst listAll = async () => {\n  const sales = await saleModel.findAll();\n  return { status: 'SUCCESSFUL', data: sales };\n};\nconst findOne = async (saleId) => {\n  const sale = await saleModel.findById(saleId);\n  if (sale.length === 0 || !sale) {\n    return { status: 'NOT_FOUND', data: { message: 'Sale not found' } };\n  }\n  return { status: 'SUCCESSFUL', data: sale };\n};\n\nconst verifyIfProductsExists = async (saleData) => {\n  let productNotFound = false;\n\n  const promises = saleData.map(async (data) => {\n    const product = await productModel.findById(data.productId);\n\n    if (!product) {\n      productNotFound = true;\n    }\n  });\n\n  await Promise.all(promises);\n\n  return productNotFound;\n};\n\nconst create = async (saleData) => {\n  const error = validateCreateSaleData(saleData);\n\n  if (error) {\n    return { status: mapJoiError(error.type), data: { message: error.message } };\n  }\n\n  const productNotFound = await verifyIfProductsExists(saleData);\n\n  if (productNotFound) {\n    return { status: 'NOT_FOUND', data: { message: 'Product not found' } };\n  }\n\n  const saleId = await saleModel.insert(saleData);\n\n  const newSale = {\n    id: saleId,\n    itemsSold: saleData,\n  };\n  return { status: 'CREATED', data: newSale };\n};\nmodule.exports = {\n  listAll,\n  findOne,\n  create,\n};"},"src/services/validations/validateInputValues.js":{"language":"javascript","mutants":[{"id":"144","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":15},"start":{"column":14,"line":13}}},{"id":"140","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":67,"line":6},"start":{"column":12,"line":6}}},{"id":"145","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":67,"line":14},"start":{"column":12,"line":14}}},{"id":"146","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":21},"start":{"column":18,"line":18}}},{"id":"136","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 'CREATED' to equal 'INVALID_VALUES'","status":"Killed","static":false,"testsCompleted":2,"killedBy":["16"],"coveredBy":["15","16"],"location":{"end":{"column":2,"line":8},"start":{"column":52,"line":3}}},{"id":"137","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Cannot read properties of undefined (reading 'details')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["15"],"coveredBy":["15","16"],"location":{"end":{"column":12,"line":5},"start":{"column":7,"line":5}}},{"id":"138","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'CREATED' to equal 'INVALID_VALUES'","status":"Killed","static":false,"testsCompleted":2,"killedBy":["16"],"coveredBy":["15","16"],"location":{"end":{"column":12,"line":5},"start":{"column":7,"line":5}}},{"id":"139","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 'CREATED' to equal 'INVALID_VALUES'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["16"],"coveredBy":["16"],"location":{"end":{"column":4,"line":7},"start":{"column":14,"line":5}}},{"id":"141","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["20"],"location":{"end":{"column":2,"line":16},"start":{"column":46,"line":10}}},{"id":"142","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Cannot read properties of undefined (reading 'details')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["20"],"coveredBy":["20"],"location":{"end":{"column":12,"line":13},"start":{"column":7,"line":13}}},{"id":"143","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["20"],"location":{"end":{"column":12,"line":13},"start":{"column":7,"line":13}}}],"source":"const { addProductSchema, addSaleSchema } = require('./schemas');\n\nconst validateCreateProductData = (productData) => {\n  const { error } = addProductSchema.validate(productData);\n  if (error) {\n    return { type: error.details[0].type, message: error.message };\n  }\n};\n\nconst validateCreateSaleData = (saleData) => {\n  const { error } = addSaleSchema.validate(saleData);\n\n  if (error) {\n    return { type: error.details[0].type, message: error.message };\n  }\n};\n\nmodule.exports = {\n  validateCreateProductData,\n  validateCreateSaleData,\n};"},"src/controllers/index.js":{"language":"javascript","mutants":[{"id":"0","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":7},"start":{"column":18,"line":4}}}],"source":"const productController = require('./product.controller');\nconst saleController = require('./sale.controller');\n\nmodule.exports = {\n  productController,\n  saleController,\n};\n"},"src/controllers/product.controller.js":{"language":"javascript","mutants":[{"id":"4","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":26},"start":{"column":18,"line":22}}},{"id":"2","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected stub to have been called with arguments 200","status":"Killed","static":false,"testsCompleted":1,"killedBy":["1"],"coveredBy":["1"],"location":{"end":{"column":2,"line":12},"start":{"column":46,"line":8}}},{"id":"3","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected stub to have been called with arguments 201","status":"Killed","static":false,"testsCompleted":1,"killedBy":["2"],"coveredBy":["2"],"location":{"end":{"column":2,"line":20},"start":{"column":45,"line":14}}},{"id":"1","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected stub to have been called with arguments 200","status":"Killed","static":false,"testsCompleted":1,"killedBy":["0"],"coveredBy":["0"],"location":{"end":{"column":2,"line":7},"start":{"column":47,"line":4}}}],"source":"const { productService } = require('../services');\nconst mapHttpStatus = require('../utils/mapHttpStatus');\n\nconst listAll = async (_request, response) => {\n  const { status, data } = await productService.listAll();\n  return response.status(mapHttpStatus(status)).json(data);\n};\nconst findOne = async (request, response) => {\n  const { productId } = request.params;\n  const { status, data } = await productService.findOne(productId);\n  return response.status(mapHttpStatus(status)).json(data);\n};\n\nconst create = async (request, response) => {\n  const productData = request.body;\n\n  const { status, data } = await productService.create(productData);\n\n  return response.status(mapHttpStatus(status)).json(data);\n};\n\nmodule.exports = {\n  listAll,\n  findOne,\n  create,\n};"},"src/controllers/sale.controller.js":{"language":"javascript","mutants":[{"id":"8","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":30},"start":{"column":18,"line":26}}},{"id":"5","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected stub to have been called with arguments 200","status":"Killed","static":false,"testsCompleted":1,"killedBy":["3"],"coveredBy":["3"],"location":{"end":{"column":2,"line":8},"start":{"column":47,"line":4}}},{"id":"6","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected stub to have been called with arguments 200","status":"Killed","static":false,"testsCompleted":1,"killedBy":["4"],"coveredBy":["4"],"location":{"end":{"column":2,"line":16},"start":{"column":46,"line":10}}},{"id":"7","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected stub to have been called with arguments 201","status":"Killed","static":false,"testsCompleted":1,"killedBy":["5"],"coveredBy":["5"],"location":{"end":{"column":2,"line":24},"start":{"column":45,"line":18}}}],"source":"const { saleService } = require('../services');\nconst mapHttpStatus = require('../utils/mapHttpStatus');\n\nconst listAll = async (_request, response) => {\n  const { status, data } = await saleService.listAll();\n\n  return response.status(mapHttpStatus(status)).json(data);\n};\n\nconst findOne = async (request, response) => {\n  const { saleId } = request.params;\n\n  const { status, data } = await saleService.findOne(saleId);\n\n  return response.status(mapHttpStatus(status)).json(data);\n};\n\nconst create = async (request, response) => {\n  const saleData = request.body;\n\n  const { status, data } = await saleService.create(saleData);\n\n  return response.status(mapHttpStatus(status)).json(data);\n};\n\nmodule.exports = { \n  listAll,\n  findOne,\n  create,\n};"},"src/mappers/index.js":{"language":"javascript","mutants":[{"id":"9","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":5},"start":{"column":18,"line":3}}}],"source":"const productMapper = require('./product.mapper');\n\nmodule.exports = {\n  productMapper,\n};"},"src/mappers/product.mapper.js":{"language":"javascript","mutants":[{"id":"10","mutatorName":"ArrowFunction","replacement":"() => undefined","statusReason":"Ignored because of excluded mutation \"ArrowFunction\"","status":"Ignored","static":false,"location":{"end":{"column":19,"line":4},"start":{"column":19,"line":1}}},{"id":"11","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":4},"start":{"column":55,"line":1}}},{"id":"12","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":8},"start":{"column":18,"line":6}}}],"source":"const mapFromDB = (productFromDB) => (productFromDB ? {\n  id: productFromDB.id,\n  name: productFromDB.name,\n} : productFromDB);\n\nmodule.exports = {\nmapFromDB,\n};"},"src/models/connection.js":{"language":"javascript","mutants":[{"id":"13","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":9},"start":{"column":37,"line":3}}},{"id":"14","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":57,"line":7},"start":{"column":13,"line":7}}},{"id":"15","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":57,"line":7},"start":{"column":13,"line":7}}},{"id":"16","mutatorName":"LogicalOperator","replacement":"process.env.MYSQL_DATABASE && 'StoreManager'","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":57,"line":7},"start":{"column":13,"line":7}}},{"id":"17","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":57,"line":7},"start":{"column":43,"line":7}}},{"id":"18","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":39,"line":8},"start":{"column":9,"line":8}}},{"id":"19","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":39,"line":8},"start":{"column":9,"line":8}}},{"id":"20","mutatorName":"LogicalOperator","replacement":"process.env.MYSQL_PORT && 3306","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":39,"line":8},"start":{"column":9,"line":8}}}],"source":"const mysql = require('mysql2/promise');\n\nconst connection = mysql.createPool({\n  host: process.env.MYSQL_HOSTNAME,\n  user: process.env.MYSQL_USER,\n  password: process.env.MYSQL_PASSWORD,\n  database: process.env.MYSQL_DATABASE || 'StoreManager',\n  port: process.env.MYSQL_PORT || 3306,\n});\n\nmodule.exports = connection;"},"src/models/index.js":{"language":"javascript","mutants":[{"id":"21","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":7},"start":{"column":18,"line":4}}}],"source":"const productModel = require('./product.model');\nconst saleModel = require('./sale.model');\n\nmodule.exports = {\n  productModel,\n  saleModel,\n};\n"},"src/models/product.model.js":{"language":"javascript","mutants":[{"id":"23","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":42,"line":10},"start":{"column":17,"line":10}}},{"id":"25","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":55,"line":15},"start":{"column":17,"line":15}}},{"id":"26","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"Ignored because of excluded mutation \"ArrayDeclaration\"","status":"Ignored","static":false,"location":{"end":{"column":66,"line":16},"start":{"column":55,"line":16}}},{"id":"28","mutatorName":"StringLiteral","replacement":"``","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":93,"line":24},"start":{"column":17,"line":24}}},{"id":"29","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":35},"start":{"column":18,"line":31}}},{"id":"22","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to be an instance of Array","status":"Killed","static":false,"testsCompleted":1,"killedBy":["6"],"coveredBy":["6"],"location":{"end":{"column":2,"line":13},"start":{"column":29,"line":9}}},{"id":"24","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to be an instance of Object","status":"Killed","static":false,"testsCompleted":1,"killedBy":["7"],"coveredBy":["7"],"location":{"end":{"column":2,"line":18},"start":{"column":39,"line":14}}},{"id":"27","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal 3","status":"Killed","static":false,"testsCompleted":1,"killedBy":["8"],"coveredBy":["8"],"location":{"end":{"column":2,"line":29},"start":{"column":39,"line":20}}}],"source":"const camelize = require('camelize');\n\nconst connection = require('./connection');\nconst {\n  getFormattedColumnNames,\n  getFormattedPlaceholders,\n} = require('../utils/generateFormattedQuery');\n\nconst findAll = async () => {\n  const query = 'SELECT * FROM products;';\n  const [products] = await connection.execute(query);\n  return camelize(products);\n};\nconst findById = async (productId) => {\n  const query = 'SELECT * FROM products WHERE id = ?;';\n  const [[product]] = await connection.execute(query, [productId]);\n  return camelize(product);\n};\n\nconst insert = async (productData) => {\n  const formattedColumns = getFormattedColumnNames(productData);\n  const formattedPlaceholders = getFormattedPlaceholders(productData);\n\n  const query = `INSERT INTO products(${formattedColumns}) VALUES(${formattedPlaceholders})`;\n\n  const [{ insertId }] = await connection.execute(query, Object.values(productData)); // [{insertId}]\n\n  return insertId;\n};\n\nmodule.exports = {\n  findAll,\n  findById,\n  insert,\n};"},"src/models/sale.model.js":{"language":"javascript","mutants":[{"id":"31","mutatorName":"StringLiteral","replacement":"``","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":33,"line":12},"start":{"column":17,"line":10}}},{"id":"33","mutatorName":"StringLiteral","replacement":"``","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":25,"line":19},"start":{"column":17,"line":17}}},{"id":"34","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"Ignored because of excluded mutation \"ArrayDeclaration\"","status":"Ignored","static":false,"location":{"end":{"column":58,"line":20},"start":{"column":50,"line":20}}},{"id":"37","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":72,"line":25},"start":{"column":69,"line":25}}},{"id":"38","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":77,"line":25},"start":{"column":74,"line":25}}},{"id":"39","mutatorName":"StringLiteral","replacement":"``","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":71,"line":26},"start":{"column":21,"line":26}}},{"id":"40","mutatorName":"ArrowFunction","replacement":"() => undefined","statusReason":"Ignored because of excluded mutation \"ArrowFunction\"","status":"Ignored","static":false,"location":{"end":{"column":67,"line":29},"start":{"column":36,"line":29}}},{"id":"41","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":66,"line":29},"start":{"column":47,"line":29}}},{"id":"43","mutatorName":"StringLiteral","replacement":"``","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":39,"line":36},"start":{"column":19,"line":35}}},{"id":"44","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":49},"start":{"column":18,"line":45}}},{"id":"30","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to be an instance of Array","status":"Killed","static":false,"testsCompleted":1,"killedBy":["9"],"coveredBy":["9"],"location":{"end":{"column":2,"line":15},"start":{"column":29,"line":9}}},{"id":"32","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to be an instance of Object","status":"Killed","static":false,"testsCompleted":1,"killedBy":["10"],"coveredBy":["10"],"location":{"end":{"column":2,"line":22},"start":{"column":36,"line":16}}},{"id":"35","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal 2","status":"Killed","static":false,"testsCompleted":1,"killedBy":["11"],"coveredBy":["11"],"location":{"end":{"column":2,"line":43},"start":{"column":36,"line":24}}},{"id":"36","mutatorName":"MethodExpression","replacement":"new Date().toISOString()","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["11"],"location":{"end":{"column":60,"line":25},"start":{"column":23,"line":25}}},{"id":"42","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["11"],"location":{"end":{"column":4,"line":38},"start":{"column":56,"line":31}}}],"source":"const camelize = require('camelize');\n\nconst connection = require('./connection');\nconst {\n  getFormattedColumnNames,\n  getFormattedPlaceholders,\n} = require('../utils/generateFormattedQuery');\n\nconst findAll = async () => {\n  const query = `SELECT s.id as sale_id, s.date, sp.product_id, sp.quantity FROM sales as s\n  LEFT JOIN sales_products as sp ON s.id = sp.sale_id\n  ORDER BY s.id, sp.product_id;`;\n  const [sales] = await connection.execute(query); // [[sales], [buffer ]]\n  return camelize(sales);\n};\nconst findById = async (saleId) => {\n  const query = `SELECT s.date, sp.product_id, sp.quantity FROM sales_products as sp \n  LEFT JOIN sales as s ON sp.sale_id  = s.id\n  WHERE sp.sale_id = ?;`;\n  const [sale] = await connection.execute(query, [saleId]); // [[sales], [buffer ]]\n  return camelize(sale);\n};\n\nconst insert = async (saleData) => {\n  const nowDateTime = new Date().toISOString().slice(0, 19).replace('T', ' ');\n  const querySale = `INSERT INTO sales(date) VALUES(\"${nowDateTime}\")`;\n  const [{ insertId: saleId }] = await connection.execute(querySale);\n\n  const mapSaleData = saleData.map((data) => ({ ...data, saleId }));\n\n  const promises = mapSaleData.map((mappedSaleData) => {\n    const formattedColumns = getFormattedColumnNames(mappedSaleData);\n    const formattedPlaceholders = getFormattedPlaceholders(mappedSaleData);\n\n    const query = `INSERT INTO sales_products(${formattedColumns})\n    VALUES(${formattedPlaceholders});`;\n    return connection.execute(query, Object.values(mappedSaleData));\n  });\n\n  await Promise.all(promises);\n\n  return saleId;\n};\n\nmodule.exports = {\n  findAll,\n  findById,\n  insert,\n};"},"src/routes/index.js":{"language":"javascript","mutants":[{"id":"45","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":26,"line":7},"start":{"column":15,"line":7}}},{"id":"46","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":23,"line":8},"start":{"column":15,"line":8}}}],"source":"const { Router } = require('express');\nconst productRouter = require('./product.routes');\nconst saleRouter = require('./sale.routes');\n\nconst appRouter = Router();\n\nappRouter.use('/products', productRouter);\nappRouter.use('/sales', saleRouter);\n\nmodule.exports = appRouter;"},"src/routes/product.routes.js":{"language":"javascript","mutants":[{"id":"47","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":22,"line":6},"start":{"column":19,"line":6}}},{"id":"48","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":32,"line":7},"start":{"column":19,"line":7}}},{"id":"49","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":23,"line":8},"start":{"column":20,"line":8}}}],"source":"const { Router } = require('express');\nconst { productController } = require('../controllers');\n\nconst productRouter = Router();\n\nproductRouter.get('/', productController.listAll);\nproductRouter.get('/:productId', productController.findOne);\nproductRouter.post('/', productController.create);\n\nmodule.exports = productRouter;"},"src/routes/sale.routes.js":{"language":"javascript","mutants":[{"id":"50","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":19,"line":7},"start":{"column":16,"line":7}}},{"id":"51","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":26,"line":8},"start":{"column":16,"line":8}}},{"id":"52","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":20,"line":9},"start":{"column":17,"line":9}}}],"source":"const { Router } = require('express');\n\nconst { saleController } = require('../controllers');\n\nconst saleRouter = Router();\n\nsaleRouter.get('/', saleController.listAll);\nsaleRouter.get('/:saleId', saleController.findOne);\nsaleRouter.post('/', saleController.create);\n\nmodule.exports = saleRouter;"},"src/services/index.js":{"language":"javascript","mutants":[{"id":"53","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":7},"start":{"column":18,"line":4}}}],"source":"const productService = require('./product.service');\nconst saleService = require('./sale.service');\n\nmodule.exports = {\n  productService,\n  saleService,\n};"},"src/services/product.service.js":{"language":"javascript","mutants":[{"id":"55","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":50,"line":7},"start":{"column":10,"line":7}}},{"id":"56","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":32,"line":7},"start":{"column":20,"line":7}}},{"id":"62","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":75,"line":12},"start":{"column":12,"line":12}}},{"id":"63","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":33,"line":12},"start":{"column":22,"line":12}}},{"id":"64","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":73,"line":12},"start":{"column":41,"line":12}}},{"id":"65","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":71,"line":12},"start":{"column":52,"line":12}}},{"id":"66","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":49,"line":14},"start":{"column":10,"line":14}}},{"id":"67","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":32,"line":14},"start":{"column":20,"line":14}}},{"id":"72","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":81,"line":21},"start":{"column":12,"line":21}}},{"id":"73","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":79,"line":21},"start":{"column":53,"line":21}}},{"id":"74","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":4,"line":29},"start":{"column":22,"line":26}}},{"id":"75","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":49,"line":30},"start":{"column":10,"line":30}}},{"id":"76","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":29,"line":30},"start":{"column":20,"line":30}}},{"id":"77","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":36},"start":{"column":18,"line":32}}},{"id":"54","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Cannot destructure property 'status' of '(intermediate value)' as it is undefined.","status":"Killed","static":false,"testsCompleted":1,"killedBy":["12"],"coveredBy":["12"],"location":{"end":{"column":2,"line":8},"start":{"column":29,"line":5}}},{"id":"57","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Cannot destructure property 'status' of '(intermediate value)' as it is undefined.","status":"Killed","static":false,"testsCompleted":1,"killedBy":["13"],"coveredBy":["13","14"],"location":{"end":{"column":2,"line":15},"start":{"column":38,"line":9}}},{"id":"58","mutatorName":"BooleanLiteral","replacement":"product","statusReason":"expected 'NOT_FOUND' to equal 'SUCCESSFUL'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["13"],"coveredBy":["13","14"],"location":{"end":{"column":15,"line":11},"start":{"column":7,"line":11}}},{"id":"59","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'NOT_FOUND' to equal 'SUCCESSFUL'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["13"],"coveredBy":["13","14"],"location":{"end":{"column":15,"line":11},"start":{"column":7,"line":11}}},{"id":"60","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'SUCCESSFUL' to equal 'NOT_FOUND'","status":"Killed","static":false,"testsCompleted":2,"killedBy":["14"],"coveredBy":["13","14"],"location":{"end":{"column":15,"line":11},"start":{"column":7,"line":11}}},{"id":"61","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 'SUCCESSFUL' to equal 'NOT_FOUND'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["14"],"coveredBy":["14"],"location":{"end":{"column":4,"line":13},"start":{"column":17,"line":11}}},{"id":"68","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Cannot destructure property 'status' of '(intermediate value)' as it is undefined.","status":"Killed","static":false,"testsCompleted":1,"killedBy":["15"],"coveredBy":["15","16"],"location":{"end":{"column":2,"line":31},"start":{"column":39,"line":17}}},{"id":"69","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Cannot read properties of undefined (reading 'type')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["15"],"coveredBy":["15","16"],"location":{"end":{"column":12,"line":20},"start":{"column":7,"line":20}}},{"id":"70","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'CREATED' to equal 'INVALID_VALUES'","status":"Killed","static":false,"testsCompleted":2,"killedBy":["16"],"coveredBy":["15","16"],"location":{"end":{"column":12,"line":20},"start":{"column":7,"line":20}}},{"id":"71","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 'CREATED' to equal 'INVALID_VALUES'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["16"],"coveredBy":["16"],"location":{"end":{"column":4,"line":22},"start":{"column":14,"line":20}}}],"source":"const { productModel } = require('../models');\nconst mapJoiError = require('./validations/mapJoiError');\nconst { validateCreateProductData } = require('./validations/validateInputValues');\n\nconst listAll = async () => {\n  const products = await productModel.findAll();\n  return { status: 'SUCCESSFUL', data: products };\n};\nconst findOne = async (productId) => {\n  const product = await productModel.findById(productId);\n  if (!product) {\n    return { status: 'NOT_FOUND', data: { message: 'Product not found' } };\n  }\n  return { status: 'SUCCESSFUL', data: product };\n};\n\nconst create = async (productData) => {\n  const error = validateCreateProductData(productData);\n\n  if (error) {\n    return { status: mapJoiError(error.type), data: { message: error.message } };\n  }\n\n  const productId = await productModel.insert(productData);\n\n  const newProduct = {\n    id: productId,\n    ...productData,\n  };\n  return { status: 'CREATED', data: newProduct };\n};\nmodule.exports = {\n  listAll,\n  findOne,\n  create,\n};"},"src/services/validations/mapJoiError.js":{"language":"javascript","mutants":[{"id":"120","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":4},"start":{"column":18,"line":1}}},{"id":"121","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":35,"line":2},"start":{"column":19,"line":2}}},{"id":"122","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":33,"line":3},"start":{"column":17,"line":3}}},{"id":"123","mutatorName":"ArrowFunction","replacement":"() => undefined","statusReason":"Ignored because of excluded mutation \"ArrowFunction\"","status":"Ignored","static":false,"location":{"end":{"column":81,"line":6},"start":{"column":21,"line":6}}},{"id":"127","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":81,"line":6},"start":{"column":65,"line":6}}},{"id":"124","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected true to equal 'INVALID_VALUES'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["16"],"coveredBy":["16"],"location":{"end":{"column":81,"line":6},"start":{"column":39,"line":6}}},{"id":"125","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected false to equal 'INVALID_VALUES'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["16"],"coveredBy":["16"],"location":{"end":{"column":81,"line":6},"start":{"column":39,"line":6}}},{"id":"126","mutatorName":"LogicalOperator","replacement":"joiError[joiErrorType] && 'INVALID_VALUES'","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["16"],"location":{"end":{"column":81,"line":6},"start":{"column":39,"line":6}}}],"source":"const joiError = {\n  'any.required': 'MISSING_VALUES',\n  'string.min': 'INVALID_VALUES',\n};\n\nconst mapJoiError = (joiErrorType) => joiError[joiErrorType] || 'INVALID_VALUES';\n\nmodule.exports = mapJoiError;"},"src/services/validations/schemas.js":{"language":"javascript","mutants":[{"id":"128","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":5},"start":{"column":37,"line":3}}},{"id":"129","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":15},"start":{"column":52,"line":7}}},{"id":"130","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":4,"line":10},"start":{"column":57,"line":8}}},{"id":"131","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":46,"line":9},"start":{"column":21,"line":9}}},{"id":"132","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":4,"line":14},"start":{"column":53,"line":11}}},{"id":"133","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":45,"line":12},"start":{"column":21,"line":12}}},{"id":"134","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":66,"line":13},"start":{"column":19,"line":13}}},{"id":"135","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":20},"start":{"column":18,"line":17}}}],"source":"const Joi = require('joi');\n\nconst addProductSchema = Joi.object({\n  name: Joi.string().min(5).required(),\n});\n\nconst addSaleSchema = Joi.array().items(Joi.object({\n  productId: Joi.number().integer().required().messages({\n    'any.required': '\"productId\" is required',\n  }),\n  quantity: Joi.number().min(1).required().messages({\n    'any.required': '\"quantity\" is required',\n    'number.min': '\"quantity\" must be greater than or equal to 1',\n  }),\n}));\n\nmodule.exports = {\n  addProductSchema,\n  addSaleSchema,\n};"},"src/utils/generateFormattedQuery.js":{"language":"javascript","mutants":[{"id":"147","mutatorName":"ArrowFunction","replacement":"() => undefined","statusReason":"Ignored because of excluded mutation \"ArrowFunction\"","status":"Ignored","static":false,"location":{"end":{"column":84,"line":3},"start":{"column":33,"line":3}}},{"id":"148","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":83,"line":3},"start":{"column":80,"line":3}}},{"id":"149","mutatorName":"ArrowFunction","replacement":"() => undefined","statusReason":"Ignored because of excluded mutation \"ArrowFunction\"","status":"Ignored","static":false,"location":{"end":{"column":90,"line":5},"start":{"column":34,"line":5}}},{"id":"150","mutatorName":"ArrowFunction","replacement":"() => undefined","statusReason":"Ignored because of excluded mutation \"ArrowFunction\"","status":"Ignored","static":false,"location":{"end":{"column":79,"line":5},"start":{"column":70,"line":5}}},{"id":"151","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":79,"line":5},"start":{"column":76,"line":5}}},{"id":"152","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":89,"line":5},"start":{"column":86,"line":5}}},{"id":"153","mutatorName":"ArrowFunction","replacement":"() => undefined","statusReason":"Ignored because of excluded mutation \"ArrowFunction\"","status":"Ignored","static":false,"location":{"end":{"column":14,"line":9},"start":{"column":35,"line":7}}},{"id":"154","mutatorName":"ArrowFunction","replacement":"() => undefined","statusReason":"Ignored because of excluded mutation \"ArrowFunction\"","status":"Ignored","static":false,"location":{"end":{"column":29,"line":8},"start":{"column":8,"line":8}}},{"id":"155","mutatorName":"StringLiteral","replacement":"``","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":29,"line":8},"start":{"column":17,"line":8}}},{"id":"156","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":13,"line":9},"start":{"column":9,"line":9}}},{"id":"157","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":15},"start":{"column":18,"line":11}}}],"source":"const snakeize = require('snakeize');\n\nconst getFormattedColumnNames = (object) => Object.keys(snakeize(object)).join(',');\n\nconst getFormattedPlaceholders = (object) => Object.keys(object).map(() => '?').join(',');\n\nconst getFormattedUpdateColumns = (object) => Object.keys(snakeize(object))\n  .map((key) => `${key} = ?`)\n  .join(', ');\n\nmodule.exports = {\n  getFormattedColumnNames,\n  getFormattedPlaceholders,\n  getFormattedUpdateColumns,\n};\n"},"src/utils/mapHttpStatus.js":{"language":"javascript","mutants":[{"id":"158","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":7},"start":{"column":24,"line":1}}},{"id":"159","mutatorName":"ArrowFunction","replacement":"() => undefined","statusReason":"Ignored because of excluded mutation \"ArrowFunction\"","status":"Ignored","static":false,"location":{"end":{"column":64,"line":9},"start":{"column":23,"line":9}}},{"id":"160","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected status to have been called with arguments 200\n\u001b[31mtrue\u001b[0m \u001b[32m200\u001b[0m ","status":"Killed","static":false,"testsCompleted":1,"killedBy":["0"],"coveredBy":["0","1","2","3","4","5"],"location":{"end":{"column":64,"line":9},"start":{"column":35,"line":9}}},{"id":"161","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected status to have been called with arguments 200\n\u001b[31mfalse\u001b[0m \u001b[32m200\u001b[0m ","status":"Killed","static":false,"testsCompleted":1,"killedBy":["0"],"coveredBy":["0","1","2","3","4","5"],"location":{"end":{"column":64,"line":9},"start":{"column":35,"line":9}}},{"id":"162","mutatorName":"LogicalOperator","replacement":"httpStatusCode[status] && 500","statusReason":"expected status to have been called with arguments 200\n\u001b[31m500\u001b[0m \u001b[32m200\u001b[0m ","status":"Killed","static":false,"testsCompleted":1,"killedBy":["0"],"coveredBy":["0","1","2","3","4","5"],"location":{"end":{"column":64,"line":9},"start":{"column":35,"line":9}}}],"source":"const httpStatusCode = {\n  SUCCESSFUL: 200,\n  NOT_FOUND: 404,\n  CREATED: 201,\n  MISSING_VALUES: 400,\n  INVALID_VALUES: 422,\n};\n\nconst mapHttpStatus = (status) => httpStatusCode[status] || 500;\n\nmodule.exports = mapHttpStatus;"}},"schemaVersion":"1.0","thresholds":{"high":80,"low":60,"break":null},"testFiles":{"tests/unit/controllers/product.controller.test.js":{"tests":[{"id":"0","name":"Realizando teste - Product Controller Recupera todos os produtos com sucesso"},{"id":"1","name":"Realizando teste - Product Controller Recupera um produto pelo ID com sucesso"},{"id":"2","name":"Realizando teste - Product Controller Cria um produto com sucesso"}],"source":"const chai = require('chai');\nconst sinon = require('sinon');\nconst sinonChai = require('sinon-chai');\n\nchai.use(sinonChai);\n\nconst { productsFromDB, productFromDB } = require('../mocks/product.mock');\nconst { productService } = require('../../../src/services');\nconst { productController } = require('../../../src/controllers');\n\nconst { expect } = chai;\n\ndescribe('Realizando teste - Product Controller', function () {\n  afterEach(function () {\n    sinon.restore();\n  });\n  it('Recupera todos os produtos com sucesso', async function () {\n    sinon.stub(productService, 'listAll').resolves({\n      status: 'SUCCESSFUL',\n      data: productsFromDB,\n    });\n\n    const request = {};\n    const response = {\n      status: sinon.stub().returnsThis(),\n      json: sinon.stub(),\n    };\n\n    await productController.listAll(request, response);\n\n    expect(response.status).to.have.been.calledWith(200);\n    expect(response.json).to.have.been.calledWith(productsFromDB);\n  });\n  it('Recupera um produto pelo ID com sucesso', async function () {\n    sinon.stub(productService, 'findOne').resolves({\n      status: 'SUCCESSFUL',\n      data: productFromDB,\n    });\n\n    const PRODUCT_ID = productFromDB.id;\n\n    const request = {\n      params: {\n        productId: PRODUCT_ID,\n      },\n    };\n    const response = {\n      status: sinon.stub().returnsThis(),\n      json: sinon.stub(),\n    };\n\n    await productController.findOne(request, response);\n\n    expect(response.status).to.have.been.calledWith(200);\n    expect(response.json).to.have.been.calledWith(productFromDB);\n  });\n  it('Cria um produto com sucesso', async function () {\n    sinon.stub(productService, 'create').resolves({\n      status: 'CREATED',\n      data: productFromDB,\n    });\n\n    const requestData = {\n      name: productFromDB.name,\n    };\n\n    const request = {\n      body: requestData,\n    };\n    const response = {\n      status: sinon.stub().returnsThis(),\n      json: sinon.stub(),\n    };\n\n    await productController.create(request, response);\n\n    expect(response.status).to.have.been.calledWith(201);\n    expect(response.json).to.have.been.calledWith(productFromDB);\n  });\n});"},"tests/unit/controllers/sale.controller.test.js":{"tests":[{"id":"3","name":"Realizando teste - Sale Controller Recupera todas as vendas com sucesso"},{"id":"4","name":"Realizando teste - Sale Controller Recupera uma venda pelo ID com sucesso"},{"id":"5","name":"Realizando teste - Sale Controller Cria uma venda com sucesso"}],"source":"const chai = require('chai');\nconst sinon = require('sinon');\nconst sinonChai = require('sinon-chai');\n\nconst { saleService } = require('../../../src/services');\nconst { salesFromModel, saleFromModel, saleFromService } = require('../mocks/sale.mock');\nconst { saleController } = require('../../../src/controllers');\n\nchai.use(sinonChai);\n\nconst { expect } = chai;\n\ndescribe('Realizando teste - Sale Controller', function () {\n  afterEach(function () {\n    sinon.restore();\n  });\n  it('Recupera todas as vendas com sucesso', async function () {\n    sinon.stub(saleService, 'listAll').resolves({\n      status: 'SUCCESSFUL',\n      data: salesFromModel,\n    });\n\n    const responseData = Array.from(salesFromModel);\n\n    const request = {};\n    const response = {\n      status: sinon.stub().returnsThis(),\n      json: sinon.stub(),\n    };\n\n    await saleController.listAll(request, response);\n\n    expect(response.status).to.have.been.calledWith(200);\n    expect(response.json).to.have.been.calledWith(responseData);\n  });\n  it('Recupera uma venda pelo ID com sucesso', async function () {\n    sinon.stub(saleService, 'findOne').resolves({\n      status: 'SUCCESSFUL',\n      data: saleFromModel,\n    });\n\n    const SALE_ID = saleFromModel.saleId;\n\n    const responseData = {\n      ...saleFromModel,\n    };\n\n    const request = {\n      params: {\n        saleId: SALE_ID,\n      },\n    };\n    const response = {\n      status: sinon.stub().returnsThis(),\n      json: sinon.stub(),\n    };\n\n    await saleController.findOne(request, response);\n\n    expect(response.status).to.have.been.calledWith(200);\n    expect(response.json).to.have.been.calledWith(responseData);\n  });\n  it('Cria uma venda com sucesso', async function () {\n    sinon.stub(saleService, 'create').resolves({\n      status: 'CREATED',\n      data: saleFromService,\n    });\n\n    const saleData = saleFromService.itemsSold;\n\n    const responseData = {\n      ...saleFromService,\n    };\n\n    const request = {\n       body: saleData,\n    };\n    const response = {\n      status: sinon.stub().returnsThis(),\n      json: sinon.stub(),\n    };\n\n    await saleController.create(request, response);\n\n    expect(response.status).to.have.been.calledWith(201);\n    expect(response.json).to.haveOwnProperty('id');\n    expect(response.json).to.have.been.calledWith(responseData);\n  });\n});"},"tests/unit/models/product.model.test.js":{"tests":[{"id":"6","name":"Realizando teste - Product Model Recupera todos os produtos com sucesso"},{"id":"7","name":"Realizando teste - Product Model Recupera um produto pelo ID com sucesso"},{"id":"8","name":"Realizando teste - Product Model Cria um produto com sucesso"}],"source":"const chai = require('chai');\nconst sinon = require('sinon');\n\nconst connection = require('../../../src/models/connection');\nconst { productsFromDB, productFromDB, nextProductId } = require('../mocks/product.mock');\nconst { productModel } = require('../../../src/models');\n\nconst { expect } = chai;\n\ndescribe('Realizando teste - Product Model', function () {\n  afterEach(function () {\n    sinon.restore();\n  });\n  it('Recupera todos os produtos com sucesso', async function () {\n    sinon.stub(connection, 'execute').resolves([productsFromDB]);\n\n    const products = await productModel.findAll();\n\n    expect(products).to.be.instanceOf(Array);\n    expect(products).to.have.length(2);\n  });\n  it('Recupera um produto pelo ID com sucesso', async function () {\n    sinon.stub(connection, 'execute').resolves([[productFromDB]]);\n\n    const PRODUCT_ID = productFromDB.id;\n    const PRODUCT_NAME = productFromDB.name;\n\n    const product = await productModel.findById(PRODUCT_ID);\n\n    expect(product).to.be.instanceOf(Object);\n    expect(product.name).to.be.equal(PRODUCT_NAME);\n  });\n  it('Cria um produto com sucesso', async function () {\n    sinon.stub(connection, 'execute').resolves([nextProductId]);\n\n    const productData = {\n      name: 'Product Test',\n    };\n\n    const productId = await productModel.insert(productData);\n\n    expect(productId).to.be.equal(nextProductId.insertId);\n  });\n});"},"tests/unit/models/sale.model.test.js":{"tests":[{"id":"9","name":"Realizando teste - Sale Model Recupera todas as vendas com sucesso"},{"id":"10","name":"Realizando teste - Sale Model Recupera venda pelo ID com sucesso"},{"id":"11","name":"Realizando teste - Sale Model Cria venda com sucesso"}],"source":"const chai = require('chai');\nconst sinon = require('sinon');\nconst camelize = require('camelize');\n\nconst connection = require('../../../src/models/connection');\nconst { saleModel } = require('../../../src/models');\nconst { salesFromDB, saleFromDB, nextSaleId } = require('../mocks/sale.mock');\n\nconst { expect } = chai;\n\ndescribe('Realizando teste - Sale Model', function () {\n  afterEach(function () {\n    sinon.restore();\n  });\n  it('Recupera todas as vendas com sucesso', async function () {\n    sinon.stub(connection, 'execute').resolves([salesFromDB]);\n\n    const sales = await saleModel.findAll();\n\n    const responseData = camelize(salesFromDB);\n\n    expect(sales).to.be.instanceOf(Array);\n    expect(sales).to.have.length(2);\n    expect(sales).to.be.deep.equal(responseData);\n  });\n  it('Recupera venda pelo ID com sucesso', async function () {\n    sinon.stub(connection, 'execute').resolves([saleFromDB]);\n\n    const SALE_ID = saleFromDB.sale_id;\n\n    const sale = await saleModel.findById(SALE_ID);\n\n    expect(sale).to.be.instanceOf(Object);\n    expect(sale).to.haveOwnProperty('saleId');\n    expect(sale.saleId).to.be.equal(SALE_ID);\n  });\n  it('Cria venda com sucesso', async function () {\n    sinon.stub(connection, 'execute').resolves([nextSaleId]);\n\n    const saleData = [\n      {\n        productId: 1,\n        quantity: 1,\n      },\n      {\n        productId: 2,\n        quantity: 5,\n      },\n    ];\n\n    const saleId = await saleModel.insert(saleData);\n\n    expect(saleId).to.be.equal(nextSaleId.insertId);\n  });\n});"},"tests/unit/services/product.service.test.js":{"tests":[{"id":"12","name":"Realizando teste - Product Service Recupera todos os produtos com sucesso"},{"id":"13","name":"Realizando teste - Product Service Recupera um produto pelo ID com sucesso"},{"id":"14","name":"Realizando teste - Product Service Não recupera um produto pelo ID com id inexistente"},{"id":"15","name":"Realizando teste - Product Service Cria um produto com sucesso"},{"id":"16","name":"Realizando teste - Product Service Não cria um produto passando dados inválidos"}],"source":"const chai = require('chai');\nconst sinon = require('sinon');\n\nconst { productsFromDB, productFromDB } = require('../mocks/product.mock');\nconst { productModel } = require('../../../src/models');\nconst { productService } = require('../../../src/services');\n\nconst { expect } = chai;\n\ndescribe('Realizando teste - Product Service', function () {\n  afterEach(function () {\n    sinon.restore();\n  });\n  it('Recupera todos os produtos com sucesso', async function () {\n    sinon.stub(productModel, 'findAll').resolves(productsFromDB);\n\n    const { status, data } = await productService.listAll();\n\n    expect(status).to.be.equal('SUCCESSFUL');\n    expect(data).to.be.instanceOf(Array);\n    expect(data).to.have.length(2);\n  });\n  it('Recupera um produto pelo ID com sucesso', async function () {\n    sinon.stub(productModel, 'findById').resolves(productFromDB);\n\n    const PRODUCT_ID = productFromDB.id;\n    const PRODUCT_NAME = productFromDB.name;\n\n    const { status, data } = await productService.findOne(PRODUCT_ID);\n\n    expect(status).to.be.equal('SUCCESSFUL');\n    expect(data).to.be.instanceOf(Object);\n    expect(data.name).to.be.equal(PRODUCT_NAME);\n  });\n  it('Não recupera um produto pelo ID com id inexistente', async function () {\n    sinon.stub(productModel, 'findById').resolves(undefined);\n\n    const NON_EXISTENT_PRODUCT_ID = 9999;\n\n    const { status, data } = await productService.findOne(NON_EXISTENT_PRODUCT_ID);\n\n    expect(status).to.be.equal('NOT_FOUND');\n    expect(data).to.haveOwnProperty('message');\n    expect(data.message).to.be.equal('Product not found');\n  });\n  it('Cria um produto com sucesso', async function () {\n    sinon.stub(productModel, 'insert').resolves(productFromDB);\n\n    const productData = {\n      name: productFromDB.name,\n    };\n\n    const { status, data } = await productService.create(productData);\n\n    expect(status).to.be.equal('CREATED');\n    expect(data).to.haveOwnProperty('id');\n    expect(data.name).to.be.equal(productData.name);\n  });\n  it('Não cria um produto passando dados inválidos', async function () {\n    sinon.stub(productModel, 'insert').resolves();\n\n    const INVALID_PRODUCT_NAME = 'abc';\n\n    const productData = {\n      name: INVALID_PRODUCT_NAME,\n    };\n\n    const { status, data } = await productService.create(productData);\n\n    expect(status).to.be.equal('INVALID_VALUES');\n    expect(data).to.haveOwnProperty('message');\n  });\n});"},"tests/unit/services/sale.service.test.js":{"tests":[{"id":"17","name":"Realizando teste - Sale Service Recupera todos as vendas com sucesso"},{"id":"18","name":"Realizando teste - Sale Service Recupera venda pelo ID com sucesso"},{"id":"19","name":"Realizando teste - Sale Service Não recupera venda pelo ID com saleId inexistente"},{"id":"20","name":"Realizando teste - Sale Service Cria venda com sucesso"}],"source":"const chai = require('chai');\nconst sinon = require('sinon');\n\nconst { saleModel, productModel } = require('../../../src/models');\nconst { salesFromModel, saleFromModel, nextSaleId } = require('../mocks/sale.mock');\nconst { saleService } = require('../../../src/services');\nconst { productsFromDB } = require('../mocks/product.mock');\n\nconst { expect } = chai;\n\ndescribe('Realizando teste - Sale Service', function () {\n  afterEach(function () {\n    sinon.restore();\n  });\n  it('Recupera todos as vendas com sucesso', async function () {\n    sinon.stub(saleModel, 'findAll').resolves(salesFromModel);\n\n    const { data, status } = await saleService.listAll();\n\n    expect(status).to.be.equal('SUCCESSFUL');\n    expect(data).to.be.instanceOf(Array);\n    expect(data).to.have.length(2);\n  });\n  it('Recupera venda pelo ID com sucesso', async function () {\n    sinon.stub(saleModel, 'findById').resolves(saleFromModel);\n\n    const SALE_ID = saleFromModel.saleId;\n\n    const responseData = {\n      ...saleFromModel,\n    };\n\n    const { status, data } = await saleService.findOne(SALE_ID);\n\n    expect(status).to.be.equal('SUCCESSFUL');\n    expect(data).to.be.instanceOf(Object);\n    expect(data).to.be.deep.equal(responseData);\n  });\n  it('Não recupera venda pelo ID com saleId inexistente', async function () {\n    sinon.stub(saleModel, 'findById').resolves([]);\n\n    const NON_EXISTENT_SALE_ID = 9999;\n\n    const { status, data } = await saleService.findOne(NON_EXISTENT_SALE_ID);\n\n    expect(status).to.be.equal('NOT_FOUND');\n    expect(data).to.haveOwnProperty('message');\n    expect(data.message).to.be.equal('Sale not found');\n  });\n  it('Cria venda com sucesso', async function () {\n    const saleData = [\n      {\n        productId: 1,\n        quantity: 1,\n      },\n      {\n        productId: 2,\n        quantity: 5,\n      },\n    ];\n\n    sinon.stub(productModel, 'findById')\n      .onFirstCall()\n      .resolves(productsFromDB[0])\n      .onSecondCall()\n      .resolves(productsFromDB[1]);\n    sinon.stub(saleModel, 'insert').resolves(nextSaleId.insertId);\n\n    const SALE_ID = nextSaleId.insertId;\n\n    const responseData = {\n      id: SALE_ID,\n      itemsSold: saleData,\n    };\n\n    const { status, data } = await saleService.create(saleData);\n\n    expect(status).to.be.equal('CREATED');\n    expect(data).to.be.instanceOf(Object);\n    expect(data).to.haveOwnProperty('id');\n    expect(data).to.be.deep.equal(responseData);\n  });\n});"}},"projectRoot":"/home/marcos-ranauro/Trybe/Projetos/Turma-29-Tribo-A/Back-End/sd-029-a-store-manager/backend","config":{"$schema":"./node_modules/@stryker-mutator/core/schema/stryker-schema.json","packageManager":"npm","reporters":["html","clear-text","json","progress"],"mutate":["src/**/*.js","!src/{app,server}.js"],"mutator":{"excludedMutations":["StringLiteral","ObjectLiteral","ArrayDeclaration","ArrowFunction"],"plugins":null},"testRunner":"mocha","coverageAnalysis":"perTest","ignoreStatic":true,"allowConsoleColors":true,"checkers":[],"checkerNodeArgs":[],"commandRunner":{"command":"npm test"},"clearTextReporter":{"allowColor":true,"allowEmojis":false,"logTests":true,"maxTestsToLog":3},"dashboard":{"baseUrl":"https://dashboard.stryker-mutator.io/api/reports","reportType":"full"},"dryRunOnly":false,"eventReporter":{"baseDir":"reports/mutation/events"},"ignorePatterns":[],"incremental":false,"incrementalFile":"reports/stryker-incremental.json","force":false,"fileLogLevel":"off","inPlace":false,"logLevel":"info","maxConcurrentTestRunners":9007199254740991,"maxTestRunnerReuse":0,"plugins":["@stryker-mutator/*"],"appendPlugins":[],"htmlReporter":{"fileName":"reports/mutation/mutation.html"},"jsonReporter":{"fileName":"reports/mutation/mutation.json"},"disableTypeChecks":"{test,src,lib}/**/*.{js,ts,jsx,tsx,html,vue}","symlinkNodeModules":true,"tempDirName":".stryker-tmp","cleanTempDir":true,"testRunnerNodeArgs":[],"thresholds":{"high":80,"low":60,"break":null},"timeoutFactor":1.5,"timeoutMS":5000,"dryRunTimeoutMinutes":5,"tsconfigFile":"tsconfig.json","warnings":true,"disableBail":false,"mochaOptions":{}},"framework":{"name":"StrykerJS","version":"6.4.2","branding":{"homepageUrl":"https://stryker-mutator.io","imageUrl":"data:image/svg+xml;utf8,%3Csvg viewBox='0 0 1458 1458' xmlns='http://www.w3.org/2000/svg' fill-rule='evenodd' clip-rule='evenodd' stroke-linejoin='round' stroke-miterlimit='2'%3E%3Cpath fill='none' d='M0 0h1458v1458H0z'/%3E%3CclipPath id='a'%3E%3Cpath d='M0 0h1458v1458H0z'/%3E%3C/clipPath%3E%3Cg clip-path='url(%23a)'%3E%3Cpath d='M1458 729c0 402.655-326.345 729-729 729S0 1131.655 0 729C0 326.445 326.345 0 729 0s729 326.345 729 729' fill='%23e74c3c' fill-rule='nonzero'/%3E%3Cpath d='M778.349 1456.15L576.6 1254.401l233-105 85-78.668v-64.332l-257-257-44-187-50-208 251.806-82.793L1076.6 389.401l380.14 379.15c-19.681 367.728-311.914 663.049-678.391 687.599z' fill-opacity='.3'/%3E%3Cpath d='M753.4 329.503c41.79 0 74.579 7.83 97.925 25.444 23.571 18.015 41.69 43.956 55.167 77.097l11.662 28.679 165.733-58.183-14.137-32.13c-26.688-60.655-64.896-108.61-114.191-144.011-49.329-35.423-117.458-54.302-204.859-54.302-50.78 0-95.646 7.376-134.767 21.542-40.093 14.671-74.09 34.79-102.239 60.259-28.84 26.207-50.646 57.06-65.496 92.701-14.718 35.052-22.101 72.538-22.101 112.401 0 72.536 20.667 133.294 61.165 182.704 38.624 47.255 98.346 88.037 179.861 121.291 42.257 17.475 78.715 33.125 109.227 46.994 27.193 12.361 49.294 26.124 66.157 41.751 15.309 14.186 26.497 30.584 33.63 49.258 7.721 20.214 11.16 45.69 11.16 76.402 0 28.021-4.251 51.787-13.591 71.219-8.832 18.374-20.171 33.178-34.523 44.219-14.787 11.374-31.193 19.591-49.393 24.466-19.68 5.359-39.14 7.993-58.69 7.993-29.359 0-54.387-3.407-75.182-10.747-20.112-7.013-37.144-16.144-51.259-27.486-13.618-11.009-24.971-23.766-33.744-38.279-9.64-15.8-17.272-31.924-23.032-48.408l-10.965-31.376-161.669 60.585 10.734 30.124c10.191 28.601 24.197 56.228 42.059 82.748 18.208 27.144 41.322 51.369 69.525 72.745 27.695 21.075 60.904 38.218 99.481 51.041 37.777 12.664 82.004 19.159 132.552 19.159 49.998 0 95.818-8.321 137.611-24.622 42.228-16.471 78.436-38.992 108.835-67.291 30.719-28.597 54.631-62.103 71.834-100.642 17.263-38.56 25.923-79.392 25.923-122.248 0-54.339-8.368-100.37-24.208-138.32-16.29-38.759-38.252-71.661-65.948-98.797-26.965-26.418-58.269-48.835-93.858-67.175-33.655-17.241-69.196-33.11-106.593-47.533-35.934-13.429-65.822-26.601-89.948-39.525-22.153-11.868-40.009-24.21-53.547-37.309-11.429-11.13-19.83-23.678-24.718-37.664-5.413-15.49-7.98-33.423-7.98-53.577 0-40.883 11.293-71.522 37.086-90.539 28.443-20.825 64.985-30.658 109.311-30.658z' fill='%23f1c40f' fill-rule='nonzero'/%3E%3Cpath d='M720 0h18v113h-18zM1458 738v-18h-113v18h113zM720 1345h18v113h-18zM113 738v-18H0v18h113z'/%3E%3C/g%3E%3C/svg%3E"},"dependencies":{"@stryker-mutator/mocha-runner":"6.4.2","mocha":"10.2.0"}}}